{"data_input_builder": {"datainputs": [{"name": "thirdparty_cybergrx", "type": "customized", "code": "\n# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport json\nimport datetime\n\n'''\n    IMPORTANT\n    Edit only the validate_input and collect_events functions.\n    Do not edit any other part in this file.\n    This file is generated only once when creating the modular input.\n'''\n'''\n# For advanced users, if you want to create single instance mod input, uncomment this method.\ndef use_single_instance_mode():\n    return True\n'''\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    # grx_api_token = definition.parameters.get('grx_api_token', None)\n    pass\n\ndef collect_events(helper, ew):\n    helper.set_log_level(\"DEBUG\")\n    \n    global_cybergrx_api = helper.get_global_setting(\"cybergrx_api\")\n    opt_grx_api_token = helper.get_arg('api_token')\n\n    proxy_settings = helper.get_proxy()\n    \n    url = \"/v1/third-parties?limit=50\"\n    method = \"GET\"\n    headers = {\n        \"Authorization\": opt_grx_api_token,\n        \"Accept\": \"Application/json\",\n    }\n    \n    while url:\n        # The following examples send rest requests to some endpoint.\n        response = helper.send_http_request(global_cybergrx_api + url, method, headers=headers, \n                                            verify=True, use_proxy=True)\n                                            \n        # check the response status, if the status is not sucessful, raise requests.HTTPError\n        response.raise_for_status()\n       \n        r_json = response.json()\n        \n        url = r_json.get('next', None)\n        for company in r_json.get('items', []):\n            event = helper.new_event(source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=json.dumps(company))\n            ew.write_event(event)\n            \n        time.sleep(1)\n", "description": "", "interval": "30", "title": "ThirdParty_CyberGRX", "customized_options": [], "streaming_mode_xml": true, "data_inputs_options": [{"type": "customized_var", "required_on_edit": false, "description": "", "placeholder": "CyberGRX API Token", "format_type": "password", "name": "api_token", "title": "API Token", "default_value": "", "required_on_create": false}], "use_external_validation": true, "index": "default", "uuid": "be1a4d6e427740f48b571f6ae55178a2", "sourcetype": "ThirdParty_GRX", "parameters": [{"type": "password", "required": false, "name": "api_token", "default_value": "", "format_type": "password", "placeholder": "CyberGRX API Token", "help_string": "", "label": "API Token", "value": ""}]}]}, "sourcetype_builder": {"ThirdParty_GRX": {"metadata": {"data_input_name": "thirdparty_cybergrx", "extractions_count": 0, "event_count": 0, "cims_count": 0}}}, "field_extraction_builder": {"ThirdParty_GRX": {"data_format": "json", "is_parsed": true}}, "basic_builder": {"author": "", "description": "", "build_no": 2, "large_icon": "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", "tab_build_no": "12", "version": "1.0.0", "visible": false, "theme": "#65A637", "friendly_name": "CyberGRX", "appname": "api-connector-splunk", "tab_version": "2.2.0", "small_icon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAADI0lEQVRYR+2YB47bMBBF6d579wl8/9P4AoZ77z14g4zBeGWtJTtYBwgBIbJEkW/+/CG5CZgPa4EP4zGfDdRut68/oVir1boJ84dC/4F+p+OtCgUCAROPx2Xo3W5nrlfvWX8ZKBKJmOPxKBDZbNbwGzCAVquVPLf7fOdL30AoUSgUZHKAQqGQOZ/PZjwey7NSqWSCwaA5nU4CRJtMJma/37sy+QYCZrvdygTAMLFTA4Z3BBCNRs18Pn8/EJHXajVR43A4mFgsJukCzG6kbbFYmMvlIn2KxaLp9/vy+1HzpBBRJhIJiXY4HMrAlUpFFCDye5Xom8vlREneo1a5XBZ/bTYbx/R5Amo0GmY6nQoIfqnX6zewarUqQIPBQILHQ6iCioCFw2EzGo0kbShMyrvd7hehngYiOtRgEMq52WzK5ECk02kZmH97vZ7cAws8MLPZTJSioRSmJzj93qZ6GoiPkJvBU6mUKKRl7QaUTCYFTCGBwGt4DvXumycgokYBokMpIiVyVMC8TILJafiMFKHqer0WZUgXfQHUsXwBMXEmkxFPMFg+n5fJ8AkGpfRJHd7gouEzLrzDBSzqKAhVirFR2V7Rn1KIqFR6ImcCFMGYRK+qPCplIEm3DcQzlgGACErb00D4BnVQCQ8sl0uBVDi31c7upwoxBkCM4xmIlAHEwHhB1bIjdwOylbRThrpcnlOmk+lgtiHV4G5A2t8pdb5MrR/hAxQiYjZKjPyoWuyJtA8pwsiYnSJ5qex12afsyT9w3DMwKcXkTo2C0GVBv3nbwkh6WBiJEEBda9g2WCgxJ55gQnymBUAx0IeNlSIgdSwdL20dRM8EQDAZ6xC/WaW5ZxIm7XQ6t90fEMCZnJLXUtfN1Wm5eKrs71NhHz9QC29QKSijoKQJYHZ6VOUe76GS29HWFxCA9gGNNHBqZOXWYwYAgLBd8A5l9ZlbRfoG0gMXqrB1kBqeYXQUZA8jJcDwHFX0QPdXgHRQ1NGDme53QJIqPQ3YfdxgeOdbIaeBAUENGqr9yJ9B30Xs9f1bFfI6uVP/fwfoHdG+OsZn///Qq9G94/tfU8V/Q4bOc/UAAAAASUVORK5CYII="}, "global_settings_builder": {"global_settings": {"customized_settings": [{"type": "text", "required": false, "name": "cybergrx_api", "default_value": "https://api.cybergrx.com", "format_type": "text", "placeholder": "", "help_string": "", "label": "CyberGRX API", "value": "https://api.cybergrx.com"}], "log_settings": {"log_level": "DEBUG"}}}}