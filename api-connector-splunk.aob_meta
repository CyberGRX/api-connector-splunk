{
    "basic_builder": {
        "appname": "api-connector-splunk",
        "author": "Dean Kooiman",
        "build_no": 8,
        "description": "Third party cyber security risk management.",
        "friendly_name": "CyberGRX",
        "large_icon": "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",
        "small_icon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAFCUlEQVRYR92Xe0zTVxTHv7RFoJQB8gpuPmGI8hABwakgwngZFofTgUJAN8QRMIKvqsHhzMCAgEYQRDvA4MAHU4eGMjKCI3PgHCoKOBCcDMfEqSgokz7ocn8bStdf+2sLWczOP01+99xzPvf03HPO1RGJxDK8RqLzvwOSyWR4MSSCRCoFV18PbDZ7TPEec4Q27c5FRfUlCsrNyQ6CTD4szE20htIKaGhIhN1ZxTgrrMOT/mdyzjlsNrznz0F68ieYPMlSYzCNgQqOV+DYqSrc6epR6Uxvgi7ClvlhR0IETE2M1AZTC2hIJIawpgEHBKfxc8evahsfUdwatwpRKwNhYcb8V6oEIol689YdbE8tQFNrh8Ygozfo601AbmoiliycC0OugVJbtEDk5rR3diN+5340t/3CCJKwdjk8585C1MY0kL1M8kUWHwGL50FXl6OgqgD0qK8fH29OR2NTG8QSCZNtar3yeAZm2kyBW2CMQpLTGdDR0YGVuSkEmdvg7mIvpyIHVNfQhMgNn0MkEqsFMqJkbWmGRR5OOH3hIu0+NpsFqXSYdu2j8KVI2xH7ck0OKO/YOezJLqbdWJC+Bb6LXOG7MhHdPQ/kdJQBsVg6qC0/CJ6hAbzej8fgn0MKtl0c3kZV6T7NgVaE+CDk3XdQWdOAU+dr5QxHfhCAQB8PrNuSQRXIEXG0n4FUfgyut3QgJbOQ9qBaA41Y27w+DP0Dz/Ht9424232fSuIvc3fB0X46AlZtRu8ffbCymIgZUydhbVgwYre+Oj0d0ZiBiNFDaUkI8V8A79AN6Lp3X84P10AP9efzweFw4OATxZiL4wJkbWUGV0c7CGsvY3hYMVmdZ9nAkKuP+saW/waI0YsGChpFaL6bA4J8PJBTeAZSqRRens6wt52CffknGF1amptiS1w41XKuNd+m9GNWh1C/mYdf7dcIaHtCBCKW++PiD9cwPCyDzbQ3YWrMw5IVGyESqy6azrNtcK4wDd989yN+731EgQR4u1PzkldoAiQSKfVNIyDGMIyDwrgAkdJP+pCyiq7L4UAG2csoqOIeFyB+/GqQYrg0cptC1TbQ10N1WSbEEilV1ZlkzEDmE41RfGAnWtvv4rPsIjwffAHfha5wdbKjkpXFYiF+TSiCl3gi9WAJLl25qZJJayAe1wC209+iBq3M/DL0/JOoxFt1WRZm2k6GW+A6PHz8lAIgEyO5ZVdvtKOptRM9vQ/Ht3WU5CTD39udumG3bnfJGVfWXEmedf9UjoFng7D3jqTt+CojJCi9gOR0Ae1J5s2xR/gyP/BTD1NPntGiavxY4O4IO5vJKD4ppLVLBruvi/e+XJMbP0g+JH6ag8qaekhpWoKyZHBxsEXAYg9k5JUy5bDcOimeJ/JTMNtuGj0Q+Uq694OHfVjPz0KDGr2I7LkiPEI9ecjE+Nt9+lwZTWJpZoKM5Dj4ebkpjLFKh3yxWIKrze1ISsllfPKQk5oaG6GtU/WL5A0eF8lJ0QgN8oIRj0sbTbWeQVW1l3HgaDmut/zdkzQVAhwb8R7WfBgEnhKQEZtqARFlErEzwjpkF5xE171etZhI1IJ9PbErMVrtx6LaQKMJjpRUYP/R0+h7OkALRmoQuV15ezepDaJxhP7tmQxmh4rOIiO/jIoeETaLBTJHfyXYA54hfY4whVarCI02+vhJP4pOCHGjtRO7kqIxY6o11T60lTEDaetY2b7XDugvyd+HuygxfxoAAAAASUVORK5CYII=",
        "tab_build_no": "12",
        "tab_version": "2.2.0",
        "theme": "#65A637",
        "version": "1.1.0",
        "visible": false
    },
    "data_input_builder": {
        "datainputs": [
            {
                "code": "# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport json\nimport datetime\n\n'''\n    IMPORTANT\n    Edit only the validate_input and collect_events functions.\n    Do not edit any other part in this file.\n    This file is generated only once when creating the modular input.\n'''\n'''\n# For advanced users, if you want to create single instance mod input, uncomment this method.\ndef use_single_instance_mode():\n    return True\n'''\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    # grx_api_token = definition.parameters.get('grx_api_token', None)\n    pass\n\ndef collect_events(helper, ew):\n    helper.set_log_level(\"DEBUG\")\n    \n    global_cybergrx_api = helper.get_global_setting(\"cybergrx_api\") or \"https://api.cybergrx.com/\"\n    global_cybergrx_api = global_cybergrx_api.rstrip(\"/\")\n    opt_grx_api_token = helper.get_arg('api_token').strip()\n\n    proxy_settings = helper.get_proxy()\n    \n    url = \"/v1/third-parties?limit=50\"\n    method = \"GET\"\n    headers = {\n        \"Authorization\": opt_grx_api_token,\n        \"Accept\": \"Application/json\",\n    }\n    \n    while url:\n        # The following examples send rest requests to some endpoint.\n        response = helper.send_http_request(global_cybergrx_api + url, method, headers=headers, \n                                            verify=True, use_proxy=True)\n                                            \n        # check the response status, if the status is not sucessful, raise requests.HTTPError\n        response.raise_for_status()\n       \n        r_json = response.json()\n        \n        url = r_json.get('next', None)\n        for company in r_json.get('items', []):\n            event = helper.new_event(source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=json.dumps(company))\n            ew.write_event(event)\n            \n        time.sleep(10)",
                "customized_options": [],
                "data_inputs_options": [
                    {
                        "default_value": "",
                        "description": "Configure a CyberGRX API token from the User Management console",
                        "format_type": "password",
                        "name": "api_token",
                        "placeholder": "CyberGRX API Token",
                        "required_on_create": true,
                        "required_on_edit": false,
                        "title": "API Token",
                        "type": "customized_var"
                    }
                ],
                "description": "Pull your third party ecosystem from CyberGRX on a specific collection interval, default is set to pull every 12 hours.",
                "index": "default",
                "interval": "43200",
                "name": "cybergrx_thirdparty",
                "parameters": [
                    {
                        "default_value": "",
                        "format_type": "password",
                        "help_string": "Configure a CyberGRX API token from the User Management console",
                        "label": "API Token",
                        "name": "api_token",
                        "placeholder": "CyberGRX API Token",
                        "required": true,
                        "type": "password",
                        "value": ""
                    }
                ],
                "sample_count": 0,
                "sourcetype": "CyberGRX:ThirdParty",
                "streaming_mode_xml": true,
                "title": "CyberGRX:ThirdParty",
                "type": "customized",
                "use_external_validation": true,
                "uuid": "a79e315b73884f7aa58f534f5f86e0cd"
            },
            {
                "code": "# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport json\nimport datetime\n\n'''\n    IMPORTANT\n    Edit only the validate_input and collect_events functions.\n    Do not edit any other part in this file.\n    This file is generated only once when creating the modular input.\n'''\n'''\n# For advanced users, if you want to create single instance mod input, uncomment this method.\ndef use_single_instance_mode():\n    return True\n'''\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    # grx_api_token = definition.parameters.get('grx_api_token', None)\n    pass\n\ndef collect_events(helper, ew):\n    helper.set_log_level(\"DEBUG\")\n    \n    global_cybergrx_api = helper.get_global_setting(\"cybergrx_api\") or \"https://api.cybergrx.com/\"\n    global_cybergrx_api = global_cybergrx_api.rstrip(\"/\")\n    opt_grx_api_token = helper.get_arg('api_token').strip()\n\n    proxy_settings = helper.get_proxy()\n    \n    url = \"/v1/third-parties?limit=50\"\n    method = \"GET\"\n    headers = {\n        \"Authorization\": opt_grx_api_token,\n        \"Accept\": \"Application/json\",\n    }\n    \n    while url:\n        response = helper.send_http_request(global_cybergrx_api + url, method, headers=headers, \n                                            verify=True, use_proxy=True)\n                                            \n        # check the response status, if the status is not sucessful, raise requests.HTTPError\n        response.raise_for_status()\n       \n        r_json = response.json()\n        \n        url = r_json.get('next', None)\n        for company in r_json.get('items', []):\n            residual_risk = company.get(\"residual_risk\", [])\n            if not residual_risk:\n                continue\n            \n            report_uri = residual_risk[0].get(\"residual_risk_uri\", None)\n            if not report_uri:\n                continue\n            \n            report_response = helper.send_http_request(global_cybergrx_api + report_uri, method, headers=headers, verify=True, use_proxy=True)\n                                            \n            # check the response status, if the status is not sucessful, raise requests.HTTPError\n            report_response.raise_for_status()\n            \n            report_json = report_response.json()\n            \n            def emit_risk(risk, company):\n                risk[\"question_id\"] = risk[\"id\"]\n                risk[\"company_id\"] = company[\"id\"]\n                risk[\"company_name\"] = company[\"name\"]\n                risk[\"id\"] = company[\"id\"] + \"-\" + risk[\"number\"]\n            \n                event = helper.new_event(source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=json.dumps(risk))\n                ew.write_event(event)\n                \n            for risk in report_json.get(\"high_risks\", []):\n                emit_risk(risk, company)\n                \n            for risk in report_json.get(\"medium_risks\", []):\n                emit_risk(risk, company)\n                \n            for risk in report_json.get(\"low_risks\", []):\n                emit_risk(risk, company)\n                \n            time.sleep(5)\n            \n        time.sleep(10)",
                "customized_options": [],
                "data_inputs_options": [
                    {
                        "default_value": "",
                        "description": "Configure a CyberGRX API token from the User Management console.",
                        "format_type": "password",
                        "name": "api_token",
                        "placeholder": "CyberGRX API Token",
                        "required_on_create": true,
                        "required_on_edit": false,
                        "title": "API Token",
                        "type": "customized_var"
                    }
                ],
                "description": "Pull report gaps and remediations analysis for completed reports that you have ordered. The default is set to pull every 48 hours.",
                "index": "default",
                "interval": "172800",
                "name": "cybergrx_gapsandremediations",
                "parameters": [
                    {
                        "default_value": "",
                        "format_type": "password",
                        "help_string": "Configure a CyberGRX API token from the User Management console.",
                        "label": "API Token",
                        "name": "api_token",
                        "placeholder": "CyberGRX API Token",
                        "required": true,
                        "type": "password",
                        "value": ""
                    }
                ],
                "sample_count": 0,
                "sourcetype": "CyberGRX:GapsAndRemediations",
                "streaming_mode_xml": true,
                "title": "CyberGRX:GapsAndRemediations",
                "type": "customized",
                "use_external_validation": true,
                "uuid": "f8bd248d9e324309bbcd68fe6870284e"
            },
            {
                "code": "# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport json\nimport datetime\n\n'''\n    IMPORTANT\n    Edit only the validate_input and collect_events functions.\n    Do not edit any other part in this file.\n    This file is generated only once when creating the modular input.\n'''\n'''\n# For advanced users, if you want to create single instance mod input, uncomment this method.\ndef use_single_instance_mode():\n    return True\n'''\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    # grx_api_token = definition.parameters.get('grx_api_token', None)\n    pass\n\ndef collect_events(helper, ew):\n    helper.set_log_level(\"DEBUG\")\n    \n    global_cybergrx_api = helper.get_global_setting(\"cybergrx_api\") or \"https://api.cybergrx.com/\"\n    global_cybergrx_api = global_cybergrx_api.rstrip(\"/\")\n    opt_grx_api_token = helper.get_arg('api_token').strip()\n\n    proxy_settings = helper.get_proxy()\n    \n    url = \"/v1/third-parties?limit=50\"\n    method = \"GET\"\n    headers = {\n        \"Authorization\": opt_grx_api_token,\n        \"Accept\": \"Application/json\",\n    }\n    \n    while url:\n        response = helper.send_http_request(global_cybergrx_api + url, method, headers=headers, \n                                            verify=True, use_proxy=True)\n                                            \n        # check the response status, if the status is not sucessful, raise requests.HTTPError\n        response.raise_for_status()\n       \n        r_json = response.json()\n        \n        url = r_json.get('next', None)\n        for company in r_json.get('items', []):\n            residual_risk = company.get(\"residual_risk\", [])\n            if not residual_risk:\n                continue\n            \n            report_uri = residual_risk[0].get(\"residual_risk_uri\", None)\n            if not report_uri:\n                continue\n            \n            report_response = helper.send_http_request(global_cybergrx_api + report_uri, method, headers=headers, verify=True, use_proxy=True)\n                                            \n            # check the response status, if the status is not sucessful, raise requests.HTTPError\n            report_response.raise_for_status()\n            \n            report_json = report_response.json()\n            \n            def emit_score(score, company):\n                score[\"question_id\"] = score[\"id\"]\n                score[\"company_id\"] = company[\"id\"]\n                score[\"company_name\"] = company[\"name\"]\n                score[\"id\"] = company[\"id\"] + \"-\" + score[\"number\"]\n            \n                event = helper.new_event(source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=json.dumps(score))\n                ew.write_event(event)\n                \n            for answer in report_json.get(\"no_answers\", []):\n                emit_score(answer, company)\n                \n            for answer in report_json.get(\"na_answers\", []):\n                emit_score(answer, company)\n                \n            for group in report_json.get(\"group_scores\", []):\n                group['id'] = group['number']\n                emit_score(group, company)\n                \n            time.sleep(5)\n            \n        time.sleep(10)",
                "customized_options": [],
                "data_inputs_options": [
                    {
                        "default_value": "",
                        "description": "Configure a CyberGRX API token from the User Management console.",
                        "format_type": "password",
                        "name": "api_token",
                        "placeholder": "CyberGRX API Token",
                        "required_on_create": true,
                        "required_on_edit": false,
                        "title": "API Token",
                        "type": "customized_var"
                    }
                ],
                "description": "Pull scores for completed reports that you have ordered.  The  default is set to pull every 48 hours.",
                "index": "default",
                "interval": "172800",
                "name": "cybergrx_score",
                "parameters": [
                    {
                        "default_value": "",
                        "format_type": "password",
                        "help_string": "Configure a CyberGRX API token from the User Management console.",
                        "label": "API Token",
                        "name": "api_token",
                        "placeholder": "CyberGRX API Token",
                        "required": true,
                        "type": "password",
                        "value": ""
                    }
                ],
                "sample_count": 0,
                "sourcetype": "CyberGRX:Score",
                "streaming_mode_xml": true,
                "title": "CyberGRX:Score",
                "type": "customized",
                "use_external_validation": true,
                "uuid": "4bbeed79b8f946e19572fd8c72446f3c"
            }
        ]
    },
    "field_extraction_builder": {
        "CyberGRX:GapsAndRemediations": {
            "data_format": "json",
            "is_parsed": true
        },
        "CyberGRX:Score": {
            "data_format": "json",
            "is_parsed": true
        },
        "CyberGRX:ThirdParty": {
            "data_format": "json",
            "is_parsed": true
        }
    },
    "global_settings_builder": {
        "global_settings": {
            "customized_settings": [
                {
                    "default_value": "https://api.cybergrx.com",
                    "format_type": "text",
                    "help_string": "",
                    "label": "CyberGRX API",
                    "name": "cybergrx_api",
                    "placeholder": "",
                    "required": false,
                    "type": "text",
                    "value": "https://api.cybergrx.com"
                }
            ],
            "log_settings": {
                "log_level": "DEBUG"
            }
        }
    },
    "sourcetype_builder": {
        "CyberGRX:GapsAndRemediations": {
            "metadata": {
                "cims_count": 0,
                "data_input_name": "cybergrx_gapsandremediations",
                "event_count": 0,
                "extractions_count": 0
            }
        },
        "CyberGRX:Score": {
            "metadata": {
                "cims_count": 0,
                "data_input_name": "cybergrx_score",
                "event_count": 0,
                "extractions_count": 0
            }
        },
        "CyberGRX:ThirdParty": {
            "metadata": {
                "cims_count": 0,
                "data_input_name": "cybergrx_thirdparty",
                "event_count": 0,
                "extractions_count": 0
            }
        }
    },
    "validation": {
        "progress": 1.0,
        "status": "job_finished",
        "validation_id": "v_1557164819_56",
        "validators": [
            "best_practice_validation",
            "data_model_mapping_validation",
            "field_extract_validation",
            "app_cert_validation"
        ]
    }
}
